function [sensitivity,correlation,cmd,regSeries,tsi,yr] = ...
    calccmdsensitivity(yrSt,yrEnd,yrCensor,cmdMethod,diffwshift,tsiChoice,TC,fLags,plotFlag)
%CALCCMDSENSITIVITY Function call to generate MLR sensitivities automatically
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% USER ENTRY PORTION: Enter conditions for CMD
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if ~exist('plotFlag')
    plotRes = 0;
else
    plotRes = plotFlag; %1 to make plots of resulting CMD pattern and time series
end
%yrSt = ;            %Start of interval, inclusive. Must be >=1870
%yrEnd = ;           %End of interval, inclusive. Must be <= current year
%yrCensor = ;           %1 to remove years coincident with volcanic eruptions
                        %and TSI anomalies close to zero, in keeping with 
                        %Camp and Tung (2007). 2 To remove exatly and only years
                        %removed by Camp and Tung (2007). 0 otherwise.
%cmdMethod = ;          %1 to employ CMD, 2 to employ LDA
%diffwshift = ;         %1 do employ difference with shift method from Zhou
                        %and Tung (2010), 0 to classify years based on whether 
                        %TSI anomaly is above or below the mean.
%For all following choices, enter integer corresponding to the desired
%predictor dataset. If predictor is not to be used, ENTER 0.                         
%tsiChoice = ;          %1 Lean (2000) 2 WLS (2005) 3 CMIP6 SOLARIS-HEPPA 4. NRLTSI2
%TChoice = ;            %1 HadCRUT4 (1850 to present) 2 NCEP (1948-present)                        
                        %3 GISS. Note 1 and 3 have not been validated
                        %through comparison to relevant LDA or CMD papers
%lonCov = ; %Percentage of longitudinal data coverage necessary to keep latitude
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ciFlag = ;             %1 to calculate CI, 0 otherwise
% ci = ; iter = ; %Settings for phase randomization CI
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Prepare temperature record and set of predictors for chosen set
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[~,atsi] = loadtsi; %Load available forcing records
tsi = atsi.tsi(:,tsiChoice);
yrTSI = atsi.yr;
load('vol.mat')
if TChoice == 1
    [X, Y, Yr,~, var] = ...
    s1a1preparehadcrut('Data/Temperature/Fields/HadCRUT.4.6.0.0.median.nc');
elseif TChoice == 2
    [X, Y, Yr,~, var] = s1apreparencep25;
elseif TChoice == 3
    [X, Y, Yr,~, var] = s1a4preparegiss;
else
    error('Must enter valid choice of temperature time series')
end
YrI = find(Yr >= yrSt & Yr <= yrEnd);
var = var(:,:,YrI); Yr = Yr(YrI); 
%Make the temperature dataset annual
if TChoice ~= 2
    %Only include latitudes with sufficient observations
    [var,Yr,yI] = returnvalidlat(var,Yr,Y,lonCov);
else
    var = squeeze(nanmean(reshape(var,...
        [size(var,1), size(var,2),12,size(var,3)/12]),3));
    Yr = squeeze(nanmean(reshape(Yr,[12,length(Yr)/12]),1))';
    yI = true(length(Y),1);
end

%Detrend, find zonal mean of annual
varN = NaN(size(var,2),size(var,3));
for ii = 1:length(Y(yI))
    z = squeeze(nanmean(var(:,ii,:),1));
    varN(ii,:) = detrendnan(z);
end
%Subset TSI so that it is covering same time interval as temperature
iTSI = find(yrTSI >= Yr(1) & yrTSI <= Yr(end));
yrTSI = yrTSI(iTSI); tsi = tsi(iTSI) - nanmean(tsi(iTSI));
if yrCensor < 2
    tsi = detrend(tsi);
end
tsiAll = tsi;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Find CI using phaserandomization
if ciFlag
    range = phaserandomcmd(Yr,Y,yI, tsi,diffwshift,varN,vol,yrSt,yrEnd, ci,iter,...
        yrCensor,cmdMethod);
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Remove years close to zero anomaly
if diffwshift %Make two sets of years based upon shift 
    [YrN,lowSet,highSet] = makepairwise(Yr,tsi,0);%no shift
    [YrN2,lowSet2,highSet2] = makepairwise(Yr,tsi,1);%shift
    iKeep1 = ismember(Yr,YrN); iKeep2 = ismember(Yr,YrN2);
    Yr2 = Yr(iKeep2); varN2 = varN(:,iKeep2); tsi2 = tsi(iKeep2);
    Yr = Yr(iKeep1); varN = varN(:,iKeep1); tsi = tsi(iKeep1);
else
    thresh = 0.049; %Threshold of TSI anomaly beyond which a year is counted
    Yr = Yr(abs(tsi) >= thresh);
    varN = varN(:,abs(tsi) >= thresh);
    tsi = tsi(abs(tsi) >= thresh);
    lowSet = tsi <= -thresh;
    highSet = tsi >= thresh;
end
if yrCensor == 1 %Remove two years following major volcanic eruptions 
    %Find all the volcanic years in the stYr:endYr period
    volInd = find(vol.year >= yrSt & vol.year <= yrEnd);
    volYears = vol.year(volInd);
    volVals = vol.val(volInd);
    volCut = quantile(vol.val, 0.9); %percentile of cutoff for volcanic index
    volYears = volYears(volVals<=volCut);
    volYears = [volYears+1; volYears + 2]; %SET TO REFLECT CAMP/TUNG METHOD
    iRem = ~ismember(Yr,volYears);
    if diffwshift
        iRem2 = ~ismember(Yr2,volYears);
    end
elseif yrCensor == 2 %Censor years deemed volcanic by Camp and Tung (2007) 
    volYears = [1982;1983;1992;1993];
    iRem = ~ismember(Yr,volYears);
    if diffwshift
        iRem2 = ~ismember(Yr2,volYears);
    end
else
    iRem = ones(length(Yr),1);
end
%Make two groups reflecting the + and - states of solar cycle
lVec = iRem.*lowSet; hVec = iRem.*highSet;
iKeep = logical(lVec+hVec);
Yr = Yr(iKeep); tsi = tsi(iKeep); varN = varN(:,iKeep);
G = logical([lVec(iKeep) hVec(iKeep)]);
if  diffwshift
    lVec2 = iRem2.*lowSet2; hVec2 = iRem2.*highSet2;
    iKeep2 = logical(lVec2+hVec2);
    Yr2 = Yr2(iKeep2); tsi2 = tsi2(iKeep2); varN2 = varN2(:,iKeep2);
    G2 = logical([lVec2(iKeep2) hVec2(iKeep2)]);
end

%Perform CMD (traditional or LDA)
wVec = cos((pi/180).*Y(yI));
wVec(abs(Y(yI)) == 90) = 0;
wVec = wVec./mean(wVec);

if diffwshift
   cmd1 = nanmean(varN(:,G(:,2)),2) - nanmean(varN(:,G(:,1)),2);
   cmd2 = nanmean(varN2(:,G2(:,2)),2) - nanmean(varN2(:,G2(:,1)),2);
   cmd = (cmd1 + cmd2) ./ 2;
else
   cmd = nanmean(varN(:,G(:,2)),2) - nanmean(varN(:,G(:,1)),2);
end
cmd = cmd ./ nanmean(cmd.*wVec);
if cmdMethod == 1
   regSeries = [];
   for ii = 1:length(Yr)
       yrVarW = varN(:,ii).*wVec;
       regSeries = [regSeries; nansum(yrVarW.*cmd)/nansum((cmd.^2).*wVec)];
   end
   b = regress(regSeries,[ones(length(Yr),1) tsi]);
   sensitivity = b(2);
   correlation = corr(regSeries,tsi);
elseif cmdMethod == 2 %LDA
    %Define length of observations, number of groups
    n = length(Yr); %number of observations per variable
    g = 2; %number of groups
    %Perform a centering operation
    meanVar = squeeze(nanmean(varN,2));
    meanVar = repmat(meanVar,[1,n]);
    %Finish nxp array of temperatures vX where n is obs, p is all observations
    vX = (varN - meanVar)';
        wVecM = zeros(length(Y(yI)),length(Y(yI)));
    wVecM(1:length(Y(yI))+1:end) = sqrt(wVec);
    vXs = vX*wVecM; %Area-weight temperature observation vector
    %Define matrix of group means, mu^T. This matrix is [num groups X num obs]
    M = (G' * G)^(-1) * G' * vXs;
    %Create within-group covariance matrix 
    sW = (1/(n-g))*(vXs - G*M)' * (vXs - G*M);
    %Create between-group covariance matrix
    sA = (g/(n*(g-1)))*(G*M)' * (G*M);
    %Create total-covariance matrix
    sT = (1/(n-1))*((n-g)*sW + ((n*(g-1))/g)*sA);
    %Perform SVD to get first 17 eigenvectors
    [~,~,dB] = svd(sT);
    %Transform data to this basis
    if size(dB,1) > 17
        b17 = dB(:,1:17);
    else
        b17 = dB;
    end
    vXsN = vXs*b17;
    %Define NEW matrix of group means, mu^T. This matrix is [n groups X p obs]
    MN = (G' * G)^(-1) * G' * vXsN;
    %Create NEW within-group covariance matrix 
    sWN = (1/(n-g))*(vXsN - G*MN)' * (vXsN - G*MN);
    %Create NEW between-group covariance matrix
    sAN = (g/(n*(g-1)))*(G*MN)' * (G*MN);
    %Create NEW total-covariance matrix
    sTN = (1/(n-1))*((n-g)*sWN + ((n*(g-1))/g)*sAN);
    %Perform minimization operation, starting with a guess
    [U,S,VT] = svd(sTN\sAN);
    uT = VT(:,1);
    %sepMin = -1*inv(uT'*sTN*uT)*(uT'*sAN*uT); %the -1 used to make it a minimizing function
    options = optimoptions('fminunc','Display','off');
    [uSep,gammaM] = fminunc(@(uSep)-1*(uSep'*sTN*uSep)\(uSep'*sAN*uSep),uT,options);
    u72 = b17*uSep;
    u72 = u72./ sqrt(((u72)'*sT*(u72)));
    denom72 = sum((u72).^2);
    regSeries = vXs*u72./denom72;
    %Find disriminant pattern, normalize it to 1 to get c(t) magnitude
    cmd = regSeries'*vX./(regSeries'*regSeries);
    sF = nanmean(cmd'.*wVec); %scaling factor
    cmd = cmd ./sF; regSeries = regSeries.*sF;
    correlation = corr(regSeries,tsi);
    b = regress(regSeries,[ones(length(Yr),1) tsi]);
    sensitivity = b(2);
end
if plotRes
    figure('Position',[10 10 700 500])
    cmdPlot = NaN(size(Y));
    cmdPlot(yI) = cmd;
    plot(Y,cmdPlot,'k')
    hold on
    plot(Y(yI),cmd,'.','MarkerSize',20,'Color','k')
    xlim([-90 90])
    xlabel('Latitude')
    ylabel('Discriminating Pattern')
    set(gca,'FontSize',16)
   
    figure('Position',[10 10 900 310])
    yrsAll = yrSt:yrEnd;
    c = get(gca,'colororder');
    plot(Yr(G(:,1)),regSeries(G(:,1)),'o','MarkerSize',16,'Color',c(1,:))
    hold on
    plot(Yr(G(:,2)),regSeries(G(:,2)),'+','MarkerSize',12,'Color',c(2,:))
    ylabel('\delta T (K)')
    yyaxis right
    hold on
    plot(yrSt:yrEnd,tsiAll,'LineWidth',2.5,'Color','k')
    hold on
    plot(Yr(G(:,1)),tsi(G(:,1)),'.','MarkerSize',20,'Color','k')
    hold on
    plot(Yr(G(:,2)),tsi(G(:,2)),'.','MarkerSize',20,'Color','k')
    hold on
    plot(yrsAll(~ismember(yrsAll,Yr)),tsiAll(~ismember(yrsAll,Yr)),...
        'o','MarkerSize',7,'Color','k')
    text(yrSt+6,-.7,['\rho = ' num2str(correlation,'%.3f')],'FontSize',20)
    if ciFlag
        text(yrSt+6,.6,...
    ['\kappa = ' num2str(sensitivity,'%.3f') '+-' num2str((range(2)-range(1))/2,'%.3f')],...
    'FontSize',20)
    else
    text(yrSt+6,.6,...
    ['\kappa = ' num2str(sensitivity,'%.3f')],'FontSize',20)
    end
    ylim([-1.13 1.1])
    yticks([-1:.5:1])
    ylabel('\delta S (W/m^{2})')
    yyaxis left
    if cmdMethod == 1
        ylim([-.4 .4])
    else
        ylim([-.2 .2])
    end
    yticks([-.4:.2:.4])
    line([yrSt yrEnd],[0 0])
    set(gca,'FontSize',20)
    xlim([yrSt yrEnd])
    xticks([yrSt:10:yrEnd])
    xlabel('Year')
    plt = get(gca);
        plt.YAxis(1).Color = 'k';
        plt.YAxis(2).Color = 'k';
    
end
function [Yr,lowSet,highSet] = makepairwise(Yr,tsi,shift)
    %Yr: Years
    %tsi: tsi timeseries corresponding to years in Yr
    %shift: whether this go-around is pairwise difference with or w/o shift
    cycSt = Yr(1); cycEnd = Yr(end);
    [setSt,setEnd] = s1c4makepairwiseyears(cycSt,cycEnd,shift);
    yrsIncluded = [];
    lowYears = []; highYears = [];
    for ii = 1:length(setSt)
        iVar = find(Yr >= setSt(ii) & Yr <= setEnd(ii));
        tsiSub = tsi(iVar); tsiSub = tsiSub - mean(tsiSub);
        subYr = Yr(iVar);
        %Select years which correspond to solar max pool, solar min pool
        highInd = tsiSub >= 0.06;
        lowInd = tsiSub <= -0.06;
        %Frame shift to match the years that were passed in 
        lowYears = [lowYears;subYr(lowInd)]; 
        highYears = [highYears;subYr(highInd)];
        yrsIncluded = [yrsIncluded; lowYears; highYears];
    end
    Yr = unique(yrsIncluded);
    lowSet = ismember(Yr,lowYears);
    highSet = ismember(Yr,highYears);
end
function [var,Yr,yI] = returnvalidlat(var,Yr,Y,lonCov)
    %Excise latitudes with insufficient number of observations
    totYr = Yr(end)-Yr(1)+1; totLon = size(var,1);
    obsNum = ~isnan(var);
    obsNum = squeeze(nansum(reshape(obsNum,...
        [size(obsNum,1), size(obsNum,2),12,size(obsNum,3)/12]),3));
    obsNum = squeeze(nansum(obsNum > 8,3)); %number of years missing fewer than X obs
    obsNum = squeeze(nansum(obsNum == totYr ,1));
    yI = obsNum > lonCov.*totLon;
    
    var = var(:,yI,:);
    var = squeeze(nanmean(reshape(var,[size(var,1), size(var,2),12,size(var,3)/12]),3));
    Yr = squeeze(nanmean(reshape(Yr,[12,length(Yr)/12]),1))';
end

